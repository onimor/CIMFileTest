@page "/"
@using CIM.Protos
@using CIM.PostgresModels
@using Grpc.Core
@using Newtonsoft.Json;
@using System.Linq.Dynamic.Core
@using System.Collections
@using Dialogs


@inject IDialogService Dialog
@inject ISnackbar Snackbar
@inject Greeter.GreeterClient GreeterClient
 

      <MudTable Elevation="20" ServerData="@ServerReload" Style="width:auto" Height="450px" RowsPerPage="15000" @bind-SelectedItem=selectedRequests
          Dense="true" Virtualize="true" Hover="true" FixedHeader="true" Breakpoint="Breakpoint.Sm" @ref="table">
     <ToolBarContent>
        <MudText Typo="Typo.h6">Все заявки</MudText>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Поиск" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
     </ToolBarContent>
     <HeaderContent>
       
        <MudTh><MudTableSortLabel SortLabel="nr_field" T="RequestsEF">№</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="sign_field" T="RequestsEF">Добавил</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="name_field" T="RequestsEF">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="position_field" T="RequestsEF">Position</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="mass_field" T="RequestsEF">Molar mass</MudTableSortLabel></MudTh>
        </HeaderContent>
   
    <RowTemplate>
        
        <MudTd @ondblclick=@(()=>Test(context.Id)) DataLabel="№" Style="@(context.Id >3 ? $"background:#fa071822;": default)">@context.Id</MudTd>
        <MudTd @ondblclick=@(()=>Test(context.Id)) DataLabel="Добавил" Style="@(context.Id >3 ? $"background:#fa071822;": default)">@context.AddedByName</MudTd>
        <MudTd @ondblclick=@(()=>Test(context.Id)) DataLabel="Name" Style="@(context.Id >3 ? $"background:#fa071822;": default)">@context.AddedById</MudTd>
        <MudTd @ondblclick=@(()=>Test(context.Id)) DataLabel="Position" Style="@(context.Id >3 ? $"background:#fa071822;": default)">@context.CustomerName</MudTd>
        <MudTd @ondblclick=@(()=>Test(context.Id)) DataLabel="Molar mass" Style="@(context.Id >3 ? $"background:#fa071822;": default)">@context.Deadline</MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>Записей не найдено</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Загрузка...</MudText>
    </LoadingContent>
   
</MudTable>
 <MudSpacer />
 <MudAlert Severity="Severity.Error" Variant="Variant.Outlined" Dense="true" Class="my-2">Просрочено 4385 заявок</MudAlert>


@code {
   
    
 
    DialogOptions fullScreen = new DialogOptions() { FullScreen = true, CloseButton = true };
    private async void OpenDialog(DialogOptions options,int Id)
    {
      var dialog = Dialog.Show<DialogUsageExample_Dialog>($"Открыта заявка №{Id}", options);

     var result = await dialog.Result;
        if (!result.Cancelled)
        {
            ShutDown("Изменения сохранены!");
        }
        else
        {
            ShutDownWarning("Изменения не сохранены!");
        }

       
    }

    void ShutDown(string text)
    {
        string message =text /*"Изменения сохранены!"*/;
        Snackbar.Add(message, Severity.Success, config =>
        {
            config.ShowCloseIcon = true;
    config.ShowCloseIcon = true;
    config.VisibleStateDuration = 3000;
    config.HideTransitionDuration = 500;
    config.ShowTransitionDuration = 500;
    config.SnackbarVariant = Variant.Outlined;
            
        });
    }
    void ShutDownWarning(string text)
    {
        string message =text /*"Изменения сохранены!"*/;
        Snackbar.Configuration.SnackbarVariant = Variant.Outlined;

        Snackbar.Add(message, Severity.Warning, config =>
        {
            config.ShowCloseIcon = true;
    config.ShowCloseIcon = true;
    config.VisibleStateDuration = 3000;
    config.HideTransitionDuration = 500;
    config.ShowTransitionDuration = 500;
    config.SnackbarVariant = Variant.Outlined;
            
        });
    }


    private IEnumerable<RequestsEF> pagedData;
    private MudTable<RequestsEF> table;

    private int totalItems;
    private string searchString = null;

    /// <summary>
    /// Here we simulate getting the paged, filtered and ordered data from the server
    /// </summary>
    private async Task<TableData<RequestsEF>> ServerReload(TableState state)
    {
        IEnumerable<RequestsEF> data = requests;
        await Task.Delay(300);
        data = data.Where(element =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (element.AddedByName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (element.Id.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if ($"{element.Id.ToString()} {element.AddedByName} {element.CustomerName}".Contains(searchString))
                return true;
            return false;
        }).ToArray();
        totalItems = data.Count();
        switch (state.SortLabel)
        {
            case "nr_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Id);
                break;
            case "sign_field":
                data = data.OrderByDirection(state.SortDirection, o => o.AddedByName);
                break;
            case "name_field":
                data = data.OrderByDirection(state.SortDirection, o => o.CustomerName);
                break;
            case "position_field":
                data = data.OrderByDirection(state.SortDirection, o => o.ExecutorName);
                break;
            case "mass_field":
                data = data.OrderByDirection(state.SortDirection, o => o.StatusName);
                break;
        }

        pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<RequestsEF>() {TotalItems = totalItems, Items = pagedData};
    }

      
        private void Test(int id)
        {
           
            OpenDialog(fullScreen,selectedRequests.Id);
        selectedId = selectedRequests?.Id.ToString();
        }
        string selectedId;
        private List<string> _requestsCollection = new();
    List<RequestsEF> requests = new();
    IEnumerable<RequestsEF> requestss;
    RequestsEF selectedRequests;
    protected override async Task OnInitializedAsync()
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
        using var serverStream = GreeterClient.GetWeightLogs(new HelloRequest());
        var stream = serverStream.ResponseStream;
       
        await foreach (var mess in stream.ReadAllAsync())
        {
            _requestsCollection.Add(mess.Message);
            requests.Add(JsonConvert.DeserializeObject<RequestsEF>(mess.Message));
            this.StateHasChanged();
            await table.ReloadServerData();
        }

    }
    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }
}

    
